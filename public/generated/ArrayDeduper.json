{
  "name": "ArrayDeduper",
  "title": "Array Deduplication",
  "description": "Array Deduplication Exercise Implementation\nDESCRIPTION:\nRemoves duplicates from an array of numbers or strings, returning unique elements in order of first appearance.\nEXAMPLE:\n[1, 2, 2, 3, 1] → [1, 2, 3]\n[\"a\", \"b\", \"a\"] → [\"a\", \"b\"]\nCONCEPTS:\n- Array manipulation\n- Hash sets\n- Filtering and reducing\nPERFORMANCE:\n- Set-based: O(n) time, O(n) space\n- Filter/Reduce-based: O(n²) time, O(n) space\nMultiple implementations included to show different approaches.",
  "code": "export function ArrayDeduplicate(arr: (number | string)[]): (number | string)[] {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array\");\n  }\n  const seen = new Set();\n  const dedupedArray: (number | string)[] = [];\n\n  for (const item of arr) {\n    if (!seen.has(item)) {\n      seen.add(item);\n      dedupedArray.push(item);\n    }\n  }\n  return dedupedArray;\n}\n\n// Filter-based implementation\n\n\nexport function ArrayFilterDeduplicate(arr: (number | string)[]): (number | string)[] {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array\");\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index);\n}\n\n// Reduce-based implementation\n",
  "rawContent": "import { ExerciseMetadata, ExampleCase } from '@interfaces/exercises';\n\n/**\n * Array Deduplication Exercise Implementation\n * \n * DESCRIPTION:\n * Removes duplicates from an array of numbers or strings, returning unique elements in order of first appearance.\n * \n * EXAMPLE:\n * [1, 2, 2, 3, 1] → [1, 2, 3]\n * [\"a\", \"b\", \"a\"] → [\"a\", \"b\"]\n * \n * CONCEPTS:\n * - Array manipulation\n * - Hash sets\n * - Filtering and reducing\n * \n * PERFORMANCE:\n * - Set-based: O(n) time, O(n) space\n * - Filter/Reduce-based: O(n²) time, O(n) space\n * \n * Multiple implementations included to show different approaches.\n */\n\n// Set-based implementation\nexport function ArrayDeduplicate(arr: (number | string)[]): (number | string)[] {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array\");\n  }\n  const seen = new Set();\n  const dedupedArray: (number | string)[] = [];\n\n  for (const item of arr) {\n    if (!seen.has(item)) {\n      seen.add(item);\n      dedupedArray.push(item);\n    }\n  }\n  return dedupedArray;\n}\n\n// Filter-based implementation\nexport function ArrayFilterDeduplicate(arr: (number | string)[]): (number | string)[] {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array\");\n  }\n  return arr.filter((item, index) => arr.indexOf(item) === index);\n}\n\n// Reduce-based implementation\nexport function ArrayReduceDeduplicate(arr: (number | string)[]): (number | string)[] {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array\");\n  }\n  return arr.reduce((deduped: (number | string)[], item) => {\n    if (!deduped.includes(item)) {\n      deduped.push(item);\n    }\n    return deduped;\n  }, []);\n}\n\n// Exercise metadata\nexport const metadata: ExerciseMetadata = {\n  title: \"Array Deduplication\",\n  description: \"Removes duplicates from an array of numbers or strings\",\n  concepts: [\"array manipulation\", \"hash sets\", \"filtering\", \"reducing\"],\n  timeComplexity: \"O(n) for Set-based, O(n²) for filter/reduce-based\",\n  spaceComplexity: \"O(n)\"\n};\n\n// Example test cases\nexport const examples: ExampleCase[] = [\n  {\n    input: [1, 2, 2, 3, 1],\n    output: [1, 2, 3],\n    description: \"Array with duplicate numbers\"\n  },\n  {\n    input: [\"a\", \"b\", \"a\", \"c\", \"b\"],\n    output: [\"a\", \"b\", \"c\"],\n    description: \"Array with duplicate strings\"\n  },\n  {\n    input: [],\n    output: [],\n    description: \"Empty array\"\n  },\n  {\n    input: [1],\n    output: [1],\n    description: \"Single element array\"\n  },\n  {\n    input: [1, \"a\", 1, \"a\", 2],\n    output: [1, \"a\", 2],\n    description: \"Mixed numbers and strings\"\n  },\n  {\n    input: null,\n    output: new Error(\"Input must be an array\"),\n    description: \"Invalid input (null)\"\n  }\n];\n\n// Default export for easy importing\nexport default {\n  ArrayDeduplicate,\n  ArrayFilterDeduplicate,\n  ArrayReduceDeduplicate,\n  metadata,\n  examples\n};",
  "metadata": "export const metadata: ExerciseMetadata = {\n  title: \"Array Deduplication\",\n  description: \"Removes duplicates from an array of numbers or strings\",\n  concepts: [\"array manipulation\", \"hash sets\", \"filtering\", \"reducing\"],\n  timeComplexity: \"O(n) for Set-based, O(n²) for filter/reduce-based\",\n  spaceComplexity: \"O(n)\"\n};",
  "examples": "export const examples: ExampleCase[] = [\n  {\n    input: [1, 2, 2, 3, 1],\n    output: [1, 2, 3],\n    description: \"Array with duplicate numbers\"\n  },\n  {\n    input: [\"a\", \"b\", \"a\", \"c\", \"b\"],\n    output: [\"a\", \"b\", \"c\"],\n    description: \"Array with duplicate strings\"\n  },\n  {\n    input: [],\n    output: [],\n    description: \"Empty array\"\n  },\n  {\n    input: [1],\n    output: [1],\n    description: \"Single element array\"\n  },\n  {\n    input: [1, \"a\", 1, \"a\", 2],\n    output: [1, \"a\", 2],\n    description: \"Mixed numbers and strings\"\n  },\n  {\n    input: null,\n    output: new Error(\"Input must be an array\"),\n    description: \"Invalid input (null)\"\n  }\n];",
  "generatedAt": "2025-06-26T23:54:56.398Z"
}