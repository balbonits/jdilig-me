{
  "name": "FibonacciSeq",
  "title": "Fibonacci Sequence",
  "description": "Fibonacci Sequence Exercise Implementation\nDESCRIPTION:\nGenerates the first n numbers in the Fibonacci sequence, where each number\nis the sum of the two preceding ones, starting with 0, 1.\nEXAMPLE:\n7 → [0, 1, 1, 2, 3, 5, 8]\n0 → []\nCONCEPTS:\n- Iteration or recursion\n- Memoization for optimization\n- Array manipulation\nPERFORMANCE:\n- Time: O(n) for iterative/memoized, O(2^n) for naive recursive\n- Space: O(n) for array storage, O(n) for recursive call stack\nMultiple implementations included to show different approaches.",
  "code": "export function FibonacciSeq(count: number): number[] {\n  if (!Number.isInteger(count)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (count < 0) {\n    throw new Error(\"Input must be non-negative\");\n  }\n  if (count === 0) return [];\n  if (count === 1) return [0];\n  if (count === 2) return [0, 1];\n\n  const fibSeq: number[] = [0, 1];\n  for (let i = 2; i < count; i++) {\n    fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n  }\n  return fibSeq;\n}\n\n// Alternative implementation (memoized recursive)\n",
  "rawContent": "import { ExerciseMetadata, ExampleCase } from '@interfaces/exercises';\n\n/**\n * Fibonacci Sequence Exercise Implementation\n * \n * DESCRIPTION:\n * Generates the first n numbers in the Fibonacci sequence, where each number\n * is the sum of the two preceding ones, starting with 0, 1.\n * \n * EXAMPLE:\n * 7 → [0, 1, 1, 2, 3, 5, 8]\n * 0 → []\n * \n * CONCEPTS:\n * - Iteration or recursion\n * - Memoization for optimization\n * - Array manipulation\n * \n * PERFORMANCE:\n * - Time: O(n) for iterative/memoized, O(2^n) for naive recursive\n * - Space: O(n) for array storage, O(n) for recursive call stack\n * \n * Multiple implementations included to show different approaches.\n */\n\n// Main function (iterative)\nexport function FibonacciSeq(count: number): number[] {\n  if (!Number.isInteger(count)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (count < 0) {\n    throw new Error(\"Input must be non-negative\");\n  }\n  if (count === 0) return [];\n  if (count === 1) return [0];\n  if (count === 2) return [0, 1];\n\n  const fibSeq: number[] = [0, 1];\n  for (let i = 2; i < count; i++) {\n    fibSeq[i] = fibSeq[i - 1] + fibSeq[i - 2];\n  }\n  return fibSeq;\n}\n\n// Alternative implementation (memoized recursive)\nexport function FibonacciSeqMemoized(count: number): number[] {\n  if (!Number.isInteger(count)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (count < 0) {\n    throw new Error(\"Input must be non-negative\");\n  }\n  if (count === 0) return [];\n\n  const memo: { [key: number]: number } = { 0: 0, 1: 1 };\n  const fib = (n: number): number => {\n    if (n in memo) return memo[n];\n    memo[n] = fib(n - 1) + fib(n - 2);\n    return memo[n];\n  };\n  \n  const result: number[] = [];\n  for (let i = 0; i < count; i++) {\n    result.push(fib(i));\n  }\n  return result;\n}\n\n// Exercise metadata\nexport const metadata: ExerciseMetadata = {\n  title: \"Fibonacci Sequence\",\n  description: \"Generates the first n numbers in the Fibonacci sequence\",\n  concepts: [\"iteration\", \"recursion\", \"memoization\", \"array manipulation\"],\n  timeComplexity: \"O(n) for iterative/memoized\",\n  spaceComplexity: \"O(n)\"\n};\n\n// Example test cases\nexport const examples: ExampleCase[] = [\n  {\n    input: 7,\n    output: [0, 1, 1, 2, 3, 5, 8],\n    description: \"Fibonacci sequence for n=7\"\n  },\n  {\n    input: 0,\n    output: [],\n    description: \"Empty sequence for n=0\"\n  },\n  {\n    input: 1,\n    output: [0],\n    description: \"Single number for n=1\"\n  },\n  {\n    input: 2,\n    output: [0, 1],\n    description: \"First two numbers for n=2\"\n  },\n  {\n    input: -1,\n    output: new Error(\"Input must be non-negative\"),\n    description: \"Negative input error\"\n  },\n  {\n    input: 3.5,\n    output: new Error(\"Input must be an integer\"),\n    description: \"Non-integer input error\"\n  }\n];\n\n// Default export for easy importing\nexport default {\n  FibonacciSeq,\n  FibonacciSeqMemoized,\n  metadata,\n  examples\n};",
  "metadata": "export const metadata: ExerciseMetadata = {\n  title: \"Fibonacci Sequence\",\n  description: \"Generates the first n numbers in the Fibonacci sequence\",\n  concepts: [\"iteration\", \"recursion\", \"memoization\", \"array manipulation\"],\n  timeComplexity: \"O(n) for iterative/memoized\",\n  spaceComplexity: \"O(n)\"\n};",
  "examples": "export const examples: ExampleCase[] = [\n  {\n    input: 7,\n    output: [0, 1, 1, 2, 3, 5, 8],\n    description: \"Fibonacci sequence for n=7\"\n  },\n  {\n    input: 0,\n    output: [],\n    description: \"Empty sequence for n=0\"\n  },\n  {\n    input: 1,\n    output: [0],\n    description: \"Single number for n=1\"\n  },\n  {\n    input: 2,\n    output: [0, 1],\n    description: \"First two numbers for n=2\"\n  },\n  {\n    input: -1,\n    output: new Error(\"Input must be non-negative\"),\n    description: \"Negative input error\"\n  },\n  {\n    input: 3.5,\n    output: new Error(\"Input must be an integer\"),\n    description: \"Non-integer input error\"\n  }\n];",
  "generatedAt": "2025-06-26T23:54:56.398Z"
}