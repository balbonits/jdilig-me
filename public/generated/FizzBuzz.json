{
  "name": "FizzBuzz",
  "title": "FizzBuzz",
  "description": "FizzBuzz Exercise Implementation\nDESCRIPTION:\nA classic programming challenge where you count from 1 to n with special rules:\n- Numbers divisible by 3 become \"Fizz\"\n- Numbers divisible by 5 become \"Buzz\"\n- Numbers divisible by both become \"FizzBuzz\"\n- Everything else stays as the number\nEXAMPLE (n=15):\n1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz\nCONCEPTS:\n- Loops and conditional logic\n- Modulo operator (%) for checking divisibility\n- String manipulation and arrays\nPERFORMANCE:\n- Time: O(n) - checks each number once\n- Space: O(n) - stores results in an array\nMultiple implementations included to show different coding approaches.",
  "code": "export function fizzBuzz(n: number): string[] {\n  const result: string[] = [];\n  \n  for (let i = 1; i <= n; i++) {\n    if (i % 15 === 0) {\n      result.push(\"FizzBuzz\");\n    } else if (i % 3 === 0) {\n      result.push(\"Fizz\");\n    } else if (i % 5 === 0) {\n      result.push(\"Buzz\");\n    } else {\n      result.push(i.toString());\n    }\n  }\n  \n  return result;\n}\n\n// Alternative implementation using string concatenation\n\n\nexport function fizzBuzzConcat(n: number): string[] {\n  const result: string[] = [];\n  \n  for (let i = 1; i <= n; i++) {\n    let output = \"\";\n    if (i % 3 === 0) output += \"Fizz\";\n    if (i % 5 === 0) output += \"Buzz\";\n    result.push(output || i.toString());\n  }\n  \n  return result;\n}\n\n// One-liner version (for showing off)\n",
  "rawContent": "// /src/exercises/fizzbuzz.ts\n\nimport { ExerciseMetadata, ExampleCase } from '@interfaces/exercises';\n\n/**\n * FizzBuzz Exercise Implementation\n * \n * DESCRIPTION:\n * A classic programming challenge where you count from 1 to n with special rules:\n * - Numbers divisible by 3 become \"Fizz\"\n * - Numbers divisible by 5 become \"Buzz\"  \n * - Numbers divisible by both become \"FizzBuzz\"\n * - Everything else stays as the number\n * \n * EXAMPLE (n=15):\n * 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, FizzBuzz\n * \n * CONCEPTS:\n * - Loops and conditional logic\n * - Modulo operator (%) for checking divisibility\n * - String manipulation and arrays\n * \n * PERFORMANCE:\n * - Time: O(n) - checks each number once\n * - Space: O(n) - stores results in an array\n * \n * Multiple implementations included to show different coding approaches.\n */\n\n// Main function\nexport function fizzBuzz(n: number): string[] {\n  const result: string[] = [];\n  \n  for (let i = 1; i <= n; i++) {\n    if (i % 15 === 0) {\n      result.push(\"FizzBuzz\");\n    } else if (i % 3 === 0) {\n      result.push(\"Fizz\");\n    } else if (i % 5 === 0) {\n      result.push(\"Buzz\");\n    } else {\n      result.push(i.toString());\n    }\n  }\n  \n  return result;\n}\n\n// Alternative implementation using string concatenation\nexport function fizzBuzzConcat(n: number): string[] {\n  const result: string[] = [];\n  \n  for (let i = 1; i <= n; i++) {\n    let output = \"\";\n    if (i % 3 === 0) output += \"Fizz\";\n    if (i % 5 === 0) output += \"Buzz\";\n    result.push(output || i.toString());\n  }\n  \n  return result;\n}\n\n// One-liner version (for showing off)\nexport const fizzBuzzOneLiner = (n: number): string[] =>\n  Array.from({ length: n }, (_, i) => {\n    const num = i + 1;\n    return (num % 3 === 0 ? \"Fizz\" : \"\") + (num % 5 === 0 ? \"Buzz\" : \"\") || num.toString();\n  });\n\n// Exercise metadata\nexport const metadata: ExerciseMetadata = {\n  title: \"FizzBuzz\",\n  description: \"Count from 1 to n, replacing multiples of 3 with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'\",\n  concepts: [\"loops\", \"conditionals\", \"modulo operator\", \"string manipulation\"],\n  timeComplexity: \"O(n)\",\n  spaceComplexity: \"O(n)\"\n};\n\n// Example test cases\nexport const examples: ExampleCase[] = [\n  {\n    input: 15,\n    output: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"],\n    description: \"Classic FizzBuzz up to 15\"\n  },\n  {\n    input: 5,\n    output: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"],\n    description: \"Small example showing Fizz and Buzz\"\n  }\n];\n\n// Default export for easy importing\nexport default {\n  fizzBuzz,\n  fizzBuzzConcat,\n  fizzBuzzOneLiner,\n  metadata,\n  examples\n};",
  "metadata": "export const metadata: ExerciseMetadata = {\n  title: \"FizzBuzz\",\n  description: \"Count from 1 to n, replacing multiples of 3 with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'\",\n  concepts: [\"loops\", \"conditionals\", \"modulo operator\", \"string manipulation\"],\n  timeComplexity: \"O(n)\",\n  spaceComplexity: \"O(n)\"\n};",
  "examples": "export const examples: ExampleCase[] = [\n  {\n    input: 15,\n    output: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"],\n    description: \"Classic FizzBuzz up to 15\"\n  },\n  {\n    input: 5,\n    output: [\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"],\n    description: \"Small example showing Fizz and Buzz\"\n  }\n];",
  "generatedAt": "2025-06-23T21:44:28.925Z"
}