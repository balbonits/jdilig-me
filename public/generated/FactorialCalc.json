{
  "name": "FactorialCalc",
  "title": "Factorial Calculator",
  "description": "Factorial Calculator Exercise Implementation\nDESCRIPTION:\nComputes the factorial of a non-negative integer n (n!), the product of all positive integers up to n.\nEXAMPLE:\n5! = 5 × 4 × 3 × 2 × 1 = 120\n0! = 1\nCONCEPTS:\n- Recursion\n- Iteration\n- Input validation\nPERFORMANCE:\n- Recursive: O(n) time, O(n) space (call stack)\n- Iterative: O(n) time, O(1) space\nMultiple implementations included to show different approaches.",
  "code": "export function factorialCalc(n: number): number {\n  if (!Number.isInteger(n)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (n < 0) {\n    throw new Error(\"Factorial is not defined for negative numbers\");\n  }\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialCalc(n - 1);\n}\n\n// Alternative implementation (iterative)\n",
  "rawContent": "import { ExerciseMetadata, ExampleCase } from '@interfaces/exercises';\n\n/**\n * Factorial Calculator Exercise Implementation\n * \n * DESCRIPTION:\n * Computes the factorial of a non-negative integer n (n!), the product of all positive integers up to n.\n * \n * EXAMPLE:\n * 5! = 5 × 4 × 3 × 2 × 1 = 120\n * 0! = 1\n * \n * CONCEPTS:\n * - Recursion\n * - Iteration\n * - Input validation\n * \n * PERFORMANCE:\n * - Recursive: O(n) time, O(n) space (call stack)\n * - Iterative: O(n) time, O(1) space\n * \n * Multiple implementations included to show different approaches.\n */\n\n// Main function (recursive)\nexport function factorialCalc(n: number): number {\n  if (!Number.isInteger(n)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (n < 0) {\n    throw new Error(\"Factorial is not defined for negative numbers\");\n  }\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorialCalc(n - 1);\n}\n\n// Alternative implementation (iterative)\nexport function factorialIterative(n: number): number {\n  if (!Number.isInteger(n)) {\n    throw new Error(\"Input must be an integer\");\n  }\n  if (n < 0) {\n    throw new Error(\"Factorial is not defined for negative numbers\");\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n}\n\n// Exercise metadata\nexport const metadata: ExerciseMetadata = {\n  title: \"Factorial Calculator\",\n  description: \"Computes the factorial of a non-negative integer\",\n  concepts: [\"recursion\", \"iteration\", \"input validation\"],\n  timeComplexity: \"O(n)\",\n  spaceComplexity: \"O(n) recursive, O(1) iterative\"\n};\n\n// Example test cases\nexport const examples: ExampleCase[] = [\n  {\n    input: 5,\n    output: 120,\n    description: \"Factorial of 5 (5! = 5 × 4 × 3 × 2 × 1)\"\n  },\n  {\n    input: 0,\n    output: 1,\n    description: \"Factorial of 0 (0! = 1 by definition)\"\n  },\n  {\n    input: 1,\n    output: 1,\n    description: \"Factorial of 1 (1! = 1)\"\n  },\n  {\n    input: 3,\n    output: 6,\n    description: \"Factorial of 3 (3! = 3 × 2 × 1)\"\n  },\n  {\n    input: -1,\n    output: null,\n    description: \"Negative input throws error\"\n  },\n  {\n    input: 3.5,\n    output: null,\n    description: \"Non-integer input throws error\"\n  }\n];\n\n// Default export for easy importing\nexport default {\n  factorialCalc,\n  factorialIterative,\n  metadata,\n  examples\n};",
  "metadata": "export const metadata: ExerciseMetadata = {\n  title: \"Factorial Calculator\",\n  description: \"Computes the factorial of a non-negative integer\",\n  concepts: [\"recursion\", \"iteration\", \"input validation\"],\n  timeComplexity: \"O(n)\",\n  spaceComplexity: \"O(n) recursive, O(1) iterative\"\n};",
  "examples": "export const examples: ExampleCase[] = [\n  {\n    input: 5,\n    output: 120,\n    description: \"Factorial of 5 (5! = 5 × 4 × 3 × 2 × 1)\"\n  },\n  {\n    input: 0,\n    output: 1,\n    description: \"Factorial of 0 (0! = 1 by definition)\"\n  },\n  {\n    input: 1,\n    output: 1,\n    description: \"Factorial of 1 (1! = 1)\"\n  },\n  {\n    input: 3,\n    output: 6,\n    description: \"Factorial of 3 (3! = 3 × 2 × 1)\"\n  },\n  {\n    input: -1,\n    output: null,\n    description: \"Negative input throws error\"\n  },\n  {\n    input: 3.5,\n    output: null,\n    description: \"Non-integer input throws error\"\n  }\n];",
  "generatedAt": "2025-06-26T23:54:56.398Z"
}